defmodule ApiSpectre.OpenApi.SecurityScheme do
  @moduledoc """
  Represents the Security Scheme Object from the OpenAPI 3.1.1 specification (section 4.8.27).

  Defines a security scheme that can be used by the operations. Supported schemes are HTTP
  authentication, API key (either as a header, a cookie parameter, or a query parameter),
  mutual TLS (use of client certificate), OAuth2's common flows (implicit, password, client
  credentials, or authorization code) and OpenID Connect Discovery.

  ## Fields

  * `type` - String. **REQUIRED**. The type of the security scheme. Valid values are:
    * `"apiKey"` - API key authentication
    * `"http"` - HTTP authentication
    * `"mutualTLS"` - Client certificate authentication
    * `"oauth2"` - OAuth2 authentication
    * `"openIdConnect"` - OpenID Connect Discovery

  * `description` - String. A description for security scheme. CommonMark syntax MAY be used for rich text representation.

  ### Fields for `type: "apiKey"`

  * `name` - String. **REQUIRED**. The name of the header, query, or cookie parameter to be used.
  * `in` - String. **REQUIRED**. The location of the API key. Valid values are "query", "header", or "cookie".

  ### Fields for `type: "http"`

  * `scheme` - String. **REQUIRED**. The name of the HTTP Authorization scheme to be used
    in the Authorization header as defined in RFC7235. The values used SHOULD be registered in the
    IANA Authentication Scheme registry.
  * `bearerFormat` - String. A hint to the client to identify how the bearer token is formatted.
    Bearer tokens are usually generated by an authorization server, so this information is primarily
    for documentation purposes.

  ### Fields for `type: "oauth2"`

  * `flows` - OAuth Flows Object. **REQUIRED**. An object containing configuration information for the
    flow types supported.

  ### Fields for `type: "openIdConnect"`

  * `openIdConnectUrl` - String. **REQUIRED**. OpenID Connect URL to discover OAuth2 configuration values.
    This MUST be in the form of a URL. The OpenID Connect standard requires the use of TLS.

  * `extensions` - Map of custom extensions. The keys MUST begin with 'x-'.

  ## Examples

  ```elixir
  # API key authentication
  %ApiSpectre.OpenApi.SecurityScheme{
    type: "apiKey",
    name: "api_key",
    in: "header",
    description: "API key authentication"
  }

  # HTTP Basic authentication
  %ApiSpectre.OpenApi.SecurityScheme{
    type: "http",
    scheme: "basic",
    description: "Basic authentication"
  }

  # HTTP Bearer authentication
  %ApiSpectre.OpenApi.SecurityScheme{
    type: "http",
    scheme: "bearer",
    bearerFormat: "JWT",
    description: "Bearer authentication with JWT token"
  }

  # OAuth2 authentication
  %ApiSpectre.OpenApi.SecurityScheme{
    type: "oauth2",
    description: "OAuth2 authentication",
    flows: %ApiSpectre.OpenApi.OAuthFlows{
      implicit: %ApiSpectre.OpenApi.OAuthFlow{
        authorizationUrl: "https://example.com/oauth/authorize",
        scopes: %{
          "read:pets" => "read your pets",
          "write:pets" => "modify pets in your account"
        }
      },
      authorizationCode: %ApiSpectre.OpenApi.OAuthFlow{
        authorizationUrl: "https://example.com/oauth/authorize",
        tokenUrl: "https://example.com/oauth/token",
        scopes: %{
          "read:pets" => "read your pets",
          "write:pets" => "modify pets in your account"
        }
      }
    }
  }

  # OpenID Connect authentication
  %ApiSpectre.OpenApi.SecurityScheme{
    type: "openIdConnect",
    openIdConnectUrl: "https://example.com/.well-known/openid-configuration",
    description: "OpenID Connect authentication"
  }
  ```
  """

  alias ApiSpectre.OpenApi.OAuthFlows

  @type t :: %__MODULE__{
          type: String.t(),
          description: String.t() | nil,
          name: String.t() | nil,
          in: String.t() | nil,
          scheme: String.t() | nil,
          bearerFormat: String.t() | nil,
          flows: OAuthFlows.t() | nil,
          openIdConnectUrl: String.t() | nil,
          extensions: %{optional(String.t()) => any()} | nil
        }

  defstruct [
    :type,
    :description,
    :name,
    :in,
    :scheme,
    :bearerFormat,
    :flows,
    :openIdConnectUrl,
    extensions: %{}
  ]
end
